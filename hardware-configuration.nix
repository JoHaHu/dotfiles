# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd = { 
   availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
   kernelModules = [ ];
   systemd = { 
     enable = true;
     enableTpm2 = true;
     services.rollback = {
       description = "Rollback BTRFS root subvolume to a pristine state";
       wantedBy = [
         "initrd.target"
       ];
       after = [
         # LUKS/TPM process
         "systemd-cryptsetup@crypt_root.service"
       ];
       before = [
         "sysroot.mount"
       ];
       unitConfig.DefaultDependencies = "no";
       serviceConfig.Type = "oneshot";
       script = ''
         mkdir /btrfs_tmp
         mount -o subvolid=5 /dev/mapper/crypt_root /btrfs_tmp
         if [[ -e /btrfs_tmp/root ]]; then
           mkdir -p /btrfs_tmp/old_roots
           timestamp=$(date --date="@$(stat -c %Y /btrfs_tmp/root)" "+%Y-%m-%d_%H:%M:%S")
           mv /btrfs_tmp/root "/btrfs_tmp/old_roots/$timestamp"
         fi   
         btrfs subvolume create /btrfs_tmp/root
         umount /btrfs_tmp
         rmdir /btrfs_tmp
        '';
     };
   };

  };

  boot.tmp.useTmpfs = true;
  boot.tmp.tmpfsSize = "50%";

  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    {
      device = "/dev/mapper/crypt_root";
      fsType = "btrfs";
      options = [ "subvol=root" "compress=zstd" ];
    };

  boot.initrd.luks.devices."crypt_root".device = "/dev/disk/by-label/root";

  fileSystems."/nix" =
    {
      device = "/dev/mapper/crypt_root";
      fsType = "btrfs";
      options = [ "subvol=nix" "compress=zstd" "noatime" ];
    };

  # fileSystems."/home" =
  #   {
  #     device = "/dev/mapper/crypt_root";
  #     fsType = "btrfs";
  #     options = [ "subvol=home" "compress=zstd" ];
  #   };

  fileSystems."/home" = {
      device = "none";
      fsType = "tmpfs";
      options = ["defaults" "size=50%" "mode=700"];
      neededForBoot = true;  
};

  fileSystems."/boot" =
    {
      device = "/dev/disk/by-label/boot";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" "umask=0077" ];
    };

  fileSystems."/persistent" = {
    device = "/dev/mapper/crypt_root";
    fsType = "btrfs";
    options = [ "subvol=persist" "compress=zstd" ];
    neededForBoot = true;
  };

  fileSystems."/swap" =
    {
      device = "/dev/mapper/crypt_root";
      fsType = "btrfs";
      options = [ "subvol=swap" "compress=zstd" ];
    };


  swapDevices = [{ device = "/swap/swapfile"; }];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
